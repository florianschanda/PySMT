(set-logic AUFBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a ty)) (sort a (witness a))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-fun bool () ty)

(declare-fun match_bool (ty Bool uni uni) uni)

;; match_bool_sort
  (assert
  (forall ((a ty))
  (forall ((x119 Bool) (x120 uni) (x121 uni)) (sort a
  (match_bool a x119 x120 x121)))))

;; match_bool_True
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni)) (=> (sort a z) (= (match_bool a true z z1) z)))))

;; match_bool_False
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni))
  (=> (sort a z1) (= (match_bool a false z z1) z1)))))

(declare-fun index_bool (Bool) Int)

;; index_bool_True
  (assert (= (index_bool true) 0))

;; index_bool_False
  (assert (= (index_bool false) 1))

(declare-fun tuple0 () ty)

(declare-fun Tuple0 () uni)

;; Tuple0_sort
  (assert (sort tuple0 Tuple0))

(declare-fun qtmark () ty)

(declare-fun ref (ty) ty)

(declare-fun mk_ref (ty uni) uni)

;; mk ref_sort
  (assert
  (forall ((a ty)) (forall ((x119 uni)) (sort (ref a) (mk_ref a x119)))))

(declare-fun contents (ty uni) uni)

;; contents_sort
  (assert (forall ((a ty)) (forall ((x119 uni)) (sort a (contents a x119)))))

;; contents_def
  (assert
  (forall ((a ty))
  (forall ((u uni)) (=> (sort a u) (= (contents a (mk_ref a u)) u)))))

(declare-fun us__ignore (ty uni) uni)

;; ___ignore_sort
  (assert
  (forall ((a ty)) (forall ((x119 uni)) (sort tuple0 (us__ignore a x119)))))

(declare-fun us_private () ty)

(declare-fun us_null_ext__ () uni)

;; __null_ext___sort
  (assert (sort us_private us_null_ext__))

(declare-fun us_type_of_heap () ty)

(declare-fun us_image () ty)

(declare-sort us_t6 0)

(declare-fun us_t7 () ty)

(declare-sort t10 0)

(declare-fun t11 () ty)

(declare-sort skein_512_context 0)

(declare-fun skein_512_context1 () ty)

(declare-sort us_split_fields6 0)

(declare-fun us_split_fields7 () ty)

(declare-sort context_header 0)

(declare-fun context_header1 () ty)

(declare-sort us_split_fields3 0)

(declare-fun us_split_fields4 () ty)

(declare-sort tweak_value 0)

(declare-fun tweak_value1 () ty)

(declare-sort us_split_fields 0)

(declare-fun us_split_fields1 () ty)

(declare-sort u6 0)

(declare-fun u61 () ty)

(declare-sort u7 0)

(declare-fun u71 () ty)

(declare-sort hash_bit_length 0)

(declare-fun hash_bit_length1 () ty)

(declare-sort t 0)

(declare-fun t1 () ty)

(declare-sort u64 0)

(declare-fun u641 () ty)

(declare-sort u32 0)

(declare-fun u321 () ty)

(declare-sort u16 0)

(declare-fun u161 () ty)

(declare-sort byte 0)

(declare-fun byte1 () ty)

(declare-sort unsigned_64 0)

(declare-fun unsigned_641 () ty)

(declare-fun t3 () ty)

(declare-fun t2 () ty)

(declare-fun map1 (ty ty) ty)

(declare-fun ite1 (ty Bool uni uni) uni)

;; ite_sort
  (assert
  (forall ((a ty))
  (forall ((x119 Bool) (x120 uni) (x121 uni)) (sort a
  (ite1 a x119 x120 x121)))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i34 Int)) Bool (ite (= i34 0) false true))

(define-fun in_range ((x119 Int)) Bool (or (= x119 0) (= x119 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 Bool)) (sort us_image (attr__ATTRIBUTE_IMAGE x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (uni) Bool)

;; size_int_pos
  (assert (< 0 8))

(declare-fun nth1 ((_ BitVec 8) Int) Bool)

(declare-fun lsr1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun uint_in_range1 ((i34 Int)) Bool (and (<= 0 i34) (<= i34 255)))

;; Of_int_zero
  (assert (= #x00 ((_ int2bv 8) 0)))

;; Of_int_ones
  (assert (= #xFF ((_ int2bv 8) 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x119 (_ BitVec 8)) (n2 (_ BitVec 8)))
  (= (bvlshr x119 n2) (lsr1 x119 (bv2nat n2)))))

;; asr_bv_is_asr
  (assert
  (forall ((x119 (_ BitVec 8)) (n2 (_ BitVec 8)))
  (= (bvashr x119 n2) (asr1 x119 (bv2nat n2)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x119 (_ BitVec 8)) (n2 (_ BitVec 8)))
  (= (bvshl x119 n2) (lsl1 x119 (bv2nat n2)))))

;; two_power_size_val
  (assert (= (+ 255 1) (pow2 8)))

(declare-fun power1 ((_ BitVec 8) Int) (_ BitVec 8))

;; size_int_pos
  (assert (< 0 16))

(declare-fun t6 () ty)

(declare-fun nth2 ((_ BitVec 16) Int) Bool)

(declare-fun lsr2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl2 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun uint_in_range2 ((i34 Int)) Bool (and (<= 0 i34) (<= i34 65535)))

;; Of_int_zero
  (assert (= #x0000 ((_ int2bv 16) 0)))

;; Of_int_ones
  (assert (= #xFFFF ((_ int2bv 16) 65535)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x119 (_ BitVec 16)) (n2 (_ BitVec 16)))
  (= (bvlshr x119 n2) (lsr2 x119 (bv2nat n2)))))

;; asr_bv_is_asr
  (assert
  (forall ((x119 (_ BitVec 16)) (n2 (_ BitVec 16)))
  (= (bvashr x119 n2) (asr2 x119 (bv2nat n2)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x119 (_ BitVec 16)) (n2 (_ BitVec 16)))
  (= (bvshl x119 n2) (lsl2 x119 (bv2nat n2)))))

;; two_power_size_val
  (assert (= (+ 65535 1) (pow2 16)))

(declare-fun power2 ((_ BitVec 16) Int) (_ BitVec 16))

;; size_int_pos
  (assert (< 0 32))

(declare-fun t7 () ty)

(declare-fun nth3 ((_ BitVec 32) Int) Bool)

(declare-fun lsr3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl3 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun uint_in_range3 ((i34 Int)) Bool (and (<= 0 i34)
                                            (<= i34 4294967295)))

;; Of_int_zero
  (assert (= #x00000000 ((_ int2bv 32) 0)))

;; Of_int_ones
  (assert (= #xFFFFFFFF ((_ int2bv 32) 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x119 (_ BitVec 32)) (n2 (_ BitVec 32)))
  (= (bvlshr x119 n2) (lsr3 x119 (bv2nat n2)))))

;; asr_bv_is_asr
  (assert
  (forall ((x119 (_ BitVec 32)) (n2 (_ BitVec 32)))
  (= (bvashr x119 n2) (asr3 x119 (bv2nat n2)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x119 (_ BitVec 32)) (n2 (_ BitVec 32)))
  (= (bvshl x119 n2) (lsl3 x119 (bv2nat n2)))))

;; two_power_size_val
  (assert (= (+ 4294967295 1) (pow2 32)))

(declare-fun power3 ((_ BitVec 32) Int) (_ BitVec 32))

;; size_int_pos
  (assert (< 0 64))

(declare-fun nth ((_ BitVec 64) Int) Bool)

(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun uint_in_range ((i34 Int)) Bool (and (<= 0 i34)
                                           (<= i34 18446744073709551615)))

;; Of_int_zero
  (assert (= #x0000000000000000 ((_ int2bv 64) 0)))

;; Of_int_ones
  (assert (= #xFFFFFFFFFFFFFFFF ((_ int2bv 64) 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x119 (_ BitVec 64)) (n2 (_ BitVec 64)))
  (= (bvlshr x119 n2) (lsr x119 (bv2nat n2)))))

;; asr_bv_is_asr
  (assert
  (forall ((x119 (_ BitVec 64)) (n2 (_ BitVec 64)))
  (= (bvashr x119 n2) (asr x119 (bv2nat n2)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x119 (_ BitVec 64)) (n2 (_ BitVec 64)))
  (= (bvshl x119 n2) (lsl x119 (bv2nat n2)))))

;; two_power_size_val
  (assert (= (+ 18446744073709551615 1) (pow2 64)))

(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun in_range5 ((x119 (_ BitVec 64))) Bool (and
                                                  (bvule ((_ int2bv 64) 0) x119)
                                                  (bvule x119 ((_ int2bv 64) 18446744073709551615))))

(define-fun in_range_int4 ((x119 Int)) Bool (and (<= 0 x119)
                                            (<= x119 18446744073709551615)))

(define-fun bool_eq5 ((x119 (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 64))) (sort us_image
  (attr__ATTRIBUTE_IMAGE5 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (uni) (_ BitVec 64))

(declare-fun to_rep4 (unsigned_64) (_ BitVec 64))

(declare-fun of_rep4 ((_ BitVec 64)) unsigned_64)

(declare-fun user_eq4 (unsigned_64 unsigned_64) Bool)

(declare-fun dummy4 () unsigned_64)

;; inversion_axiom
  (assert
  (forall ((x119 unsigned_64))
  (! (= (of_rep4 (to_rep4 x119)) x119) :pattern ((to_rep4 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 unsigned_64)) (! (in_range5
  (to_rep4 x119)) :pattern ((to_rep4 x119)) )))

(define-fun to_int6 ((x119 unsigned_64)) Int (bv2nat (to_rep4 x119)))

;; range_int_axiom
  (assert
  (forall ((x119 unsigned_64)) (! (in_range_int4
  (to_int6 x119)) :pattern ((to_int6 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 64)))
  (! (= (to_rep4 (of_rep4 x119)) x119) :pattern ((to_rep4 (of_rep4 x119))) )))

(define-fun in_range6 ((x119 (_ BitVec 8))) Bool (and
                                                 (bvule ((_ int2bv 8) 0) x119)
                                                 (bvule x119 ((_ int2bv 8) 255))))

(define-fun in_range_int5 ((x119 Int)) Bool (and (<= 0 x119) (<= x119 255)))

(define-fun bool_eq6 ((x119 (_ BitVec 8))
  (y (_ BitVec 8))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 8))) (sort us_image
  (attr__ATTRIBUTE_IMAGE6 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (uni) (_ BitVec 8))

(declare-fun to_rep5 (byte) (_ BitVec 8))

(declare-fun of_rep5 ((_ BitVec 8)) byte)

(declare-fun user_eq5 (byte byte) Bool)

(declare-fun dummy5 () byte)

;; inversion_axiom
  (assert
  (forall ((x119 byte))
  (! (= (of_rep5 (to_rep5 x119)) x119) :pattern ((to_rep5 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 byte)) (! (in_range6
  (to_rep5 x119)) :pattern ((to_rep5 x119)) )))

(define-fun to_int7 ((x119 byte)) Int (bv2nat (to_rep5 x119)))

;; range_int_axiom
  (assert
  (forall ((x119 byte)) (! (in_range_int5
  (to_int7 x119)) :pattern ((to_int7 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 8)))
  (! (= (to_rep5 (of_rep5 x119)) x119) :pattern ((to_rep5 (of_rep5 x119))) )))

(define-fun in_range13 ((x119 (_ BitVec 16))) Bool (and
                                                   (bvule ((_ int2bv 16) 0) x119)
                                                   (bvule x119 ((_ int2bv 16) 65535))))

(define-fun in_range_int12 ((x119 Int)) Bool (and (<= 0 x119)
                                             (<= x119 65535)))

(define-fun bool_eq15 ((x119 (_ BitVec 16))
  (y (_ BitVec 16))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE13 ((_ BitVec 16)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 16))) (sort us_image
  (attr__ATTRIBUTE_IMAGE13 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (uni) (_ BitVec 16))

(declare-fun to_rep12 (u16) (_ BitVec 16))

(declare-fun of_rep12 ((_ BitVec 16)) u16)

(declare-fun user_eq18 (u16 u16) Bool)

(declare-fun dummy18 () u16)

;; inversion_axiom
  (assert
  (forall ((x119 u16))
  (! (= (of_rep12 (to_rep12 x119)) x119) :pattern ((to_rep12 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 u16)) (! (in_range13
  (to_rep12 x119)) :pattern ((to_rep12 x119)) )))

(define-fun to_int14 ((x119 u16)) Int (bv2nat (to_rep12 x119)))

;; range_int_axiom
  (assert
  (forall ((x119 u16)) (! (in_range_int12
  (to_int14 x119)) :pattern ((to_int14 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 16)))
  (! (= (to_rep12 (of_rep12 x119)) x119) :pattern ((to_rep12 (of_rep12 x119))) )))

(define-fun in_range14 ((x119 (_ BitVec 32))) Bool (and
                                                   (bvule ((_ int2bv 32) 0) x119)
                                                   (bvule x119 ((_ int2bv 32) 4294967295))))

(define-fun in_range_int13 ((x119 Int)) Bool (and (<= 0 x119)
                                             (<= x119 4294967295)))

(define-fun bool_eq16 ((x119 (_ BitVec 32))
  (y (_ BitVec 32))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE14 ((_ BitVec 32)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 32))) (sort us_image
  (attr__ATTRIBUTE_IMAGE14 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (uni) (_ BitVec 32))

(declare-fun to_rep13 (u32) (_ BitVec 32))

(declare-fun of_rep13 ((_ BitVec 32)) u32)

(declare-fun user_eq19 (u32 u32) Bool)

(declare-fun dummy19 () u32)

;; inversion_axiom
  (assert
  (forall ((x119 u32))
  (! (= (of_rep13 (to_rep13 x119)) x119) :pattern ((to_rep13 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 u32)) (! (in_range14
  (to_rep13 x119)) :pattern ((to_rep13 x119)) )))

(define-fun to_int15 ((x119 u32)) Int (bv2nat (to_rep13 x119)))

;; range_int_axiom
  (assert
  (forall ((x119 u32)) (! (in_range_int13
  (to_int15 x119)) :pattern ((to_int15 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 32)))
  (! (= (to_rep13 (of_rep13 x119)) x119) :pattern ((to_rep13 (of_rep13 x119))) )))

(define-fun in_range1 ((x119 (_ BitVec 64))) Bool (and
                                                  (bvule ((_ int2bv 64) 0) x119)
                                                  (bvule x119 ((_ int2bv 64) 18446744073709551615))))

(define-fun in_range_int ((x119 Int)) Bool (and (<= 0 x119)
                                           (<= x119 18446744073709551615)))

(define-fun bool_eq ((x119 (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 64))) (sort us_image
  (attr__ATTRIBUTE_IMAGE1 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (uni) (_ BitVec 64))

(declare-fun to_rep (u64) (_ BitVec 64))

(declare-fun of_rep ((_ BitVec 64)) u64)

(declare-fun user_eq (u64 u64) Bool)

(declare-fun dummy () u64)

;; inversion_axiom
  (assert
  (forall ((x119 u64))
  (! (= (of_rep (to_rep x119)) x119) :pattern ((to_rep x119)) )))

;; range_axiom
  (assert
  (forall ((x119 u64)) (! (in_range1
  (to_rep x119)) :pattern ((to_rep x119)) )))

(define-fun to_int2 ((x119 u64)) Int (bv2nat (to_rep x119)))

;; range_int_axiom
  (assert
  (forall ((x119 u64)) (! (in_range_int
  (to_int2 x119)) :pattern ((to_int2 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 64)))
  (! (= (to_rep (of_rep x119)) x119) :pattern ((to_rep (of_rep x119))) )))

(declare-fun get (ty ty uni uni) uni)

;; get_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x119 uni) (x120 uni)) (sort b (get b a x119 x120)))))

(declare-fun set (ty ty uni uni uni) uni)

;; set_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x119 uni) (x120 uni) (x121 uni)) (sort (map1 a b)
  (set b a x119 x120 x121)))))

(declare-fun const1 (ty ty uni) uni)

;; const_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x119 uni)) (sort (map1 a b) (const1 b a x119)))))

(declare-fun const2 (byte) (Array (_ BitVec 64) byte))

(declare-fun const3 (u64) (Array (_ BitVec 64) u64))

;; Const
  (assert (forall ((b u64) (a (_ BitVec 64))) (= (select (const3 b) a) b)))

;; Const
  (assert (forall ((b byte) (a (_ BitVec 64))) (= (select (const2 b) a) b)))

;; Const
  (assert
  (forall ((a ty) (b ty))
  (forall ((b1 uni) (a1 uni))
  (=> (sort b b1) (= (get b a (const1 b a b1) a1) b1)))))

(declare-fun bool_eq4 (ty uni (_ BitVec 64) (_ BitVec 64) uni (_ BitVec 64)
  (_ BitVec 64)) Bool)

(declare-fun bool_eq26 ((Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun bool_eq29 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)) Bool)

;; T__ada_array___equal_def
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (forall ((af (_ BitVec 64)))
  (forall ((al (_ BitVec 64)))
  (forall ((b (Array (_ BitVec 64) u64)))
  (forall ((bf (_ BitVec 64)))
  (forall ((bl (_ BitVec 64)))
  (! (=
     (and
     (ite (bvule af al)
     (= (bvadd (bvsub al af) ((_ int2bv 64) 1)) (bvadd (bvsub bl bf) ((_ int2bv 64) 1)))
     (bvugt bf bl))
     (forall ((i34 (_ BitVec 64)))
     (! (=> (and (bvule af i34) (bvule i34 al))
        (= (select a i34) (select b (bvadd (bvsub bf af) i34)))) :pattern ((select a i34)) )))
     (= (bool_eq29 a af al b bf bl) true)) :pattern ((bool_eq29 a af al b bf
                                                     bl)) ))))))))

;; T__ada_array___equal_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (forall ((af (_ BitVec 64)))
  (forall ((al (_ BitVec 64)))
  (forall ((b (Array (_ BitVec 64) byte)))
  (forall ((bf (_ BitVec 64)))
  (forall ((bl (_ BitVec 64)))
  (! (=
     (and
     (ite (bvule af al)
     (= (bvadd (bvsub al af) ((_ int2bv 64) 1)) (bvadd (bvsub bl bf) ((_ int2bv 64) 1)))
     (bvugt bf bl))
     (forall ((i34 (_ BitVec 64)))
     (! (=> (and (bvule af i34) (bvule i34 al))
        (= (select a i34) (select b (bvadd (bvsub bf af) i34)))) :pattern ((select a i34)) )))
     (= (bool_eq26 a af al b bf bl) true)) :pattern ((bool_eq26 a af al b bf
                                                     bl)) ))))))))

(declare-fun t2tb ((_ BitVec 64)) uni)

;; t2tb_sort
  (assert (forall ((x119 (_ BitVec 64))) (sort t2 (t2tb x119))))

(declare-fun tb2t (uni) (_ BitVec 64))

;; BridgeL
  (assert
  (forall ((i34 (_ BitVec 64)))
  (! (= (tb2t (t2tb i34)) i34) :pattern ((t2tb i34)) )))

;; BridgeR
  (assert
  (forall ((j12 uni))
  (! (=> (sort t2 j12) (= (t2tb (tb2t j12)) j12)) :pattern ((t2tb (tb2t j12))) )))

;; T__ada_array___equal_def
  (assert
  (forall ((a ty))
  (forall ((a1 uni))
  (forall ((af (_ BitVec 64)))
  (forall ((al (_ BitVec 64)))
  (forall ((b uni))
  (forall ((bf (_ BitVec 64)))
  (forall ((bl (_ BitVec 64)))
  (! (=
     (and
     (ite (bvule af al)
     (= (bvadd (bvsub al af) ((_ int2bv 64) 1)) (bvadd (bvsub bl bf) ((_ int2bv 64) 1)))
     (bvugt bf bl))
     (forall ((i34 (_ BitVec 64)))
     (! (=> (and (bvule af i34) (bvule i34 al))
        (= (get a t2 a1 (t2tb i34)) (get a t2 b
                                    (t2tb (bvadd (bvsub bf af) i34))))) :pattern (
     (get a t2 a1 (t2tb i34))) ))) (= (bool_eq4 a a1 af al b bf bl) true)) :pattern (
  (bool_eq4 a a1 af al b bf bl)) )))))))))

(declare-fun slide (ty uni (_ BitVec 64) (_ BitVec 64)) uni)

;; slide_sort
  (assert
  (forall ((a ty))
  (forall ((x119 uni) (x120 (_ BitVec 64)) (x121 (_ BitVec 64))) (sort
  (map1 t2 a) (slide a x119 x120 x121)))))

(declare-fun slide1 ((Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

(declare-fun slide2 ((Array (_ BitVec 64) u64) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (forall ((first10 (_ BitVec 64)))
  (! (= (slide2 a first10 first10) a) :pattern ((slide2 a first10 first10)) ))))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (forall ((first10 (_ BitVec 64)))
  (! (= (slide1 a first10 first10) a) :pattern ((slide1 a first10 first10)) ))))

;; slide_eq
  (assert
  (forall ((a ty))
  (forall ((a1 uni))
  (=> (sort (map1 t2 a) a1)
  (forall ((first10 (_ BitVec 64)))
  (! (= (slide a a1 first10 first10) a1) :pattern ((slide a a1 first10
                                                   first10)) ))))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i34 (_ BitVec 64)))
  (! (= (select (slide2 a old_first new_first) i34) (select a (bvsub i34 (bvsub new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i34)) ))))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i34 (_ BitVec 64)))
  (! (= (select (slide1 a old_first new_first) i34) (select a (bvsub i34 (bvsub new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i34)) ))))))

;; slide_def
  (assert
  (forall ((a ty))
  (forall ((a1 uni))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i34 (_ BitVec 64)))
  (! (= (get a t2 (slide a a1 old_first new_first) (t2tb i34)) (get a 
                                                               t2 a1
                                                               (t2tb
                                                               (bvsub i34 (bvsub new_first old_first))))) :pattern (
  (get a t2 (slide a a1 old_first new_first) (t2tb i34))) )))))))

(declare-fun concat1 (ty uni (_ BitVec 64) (_ BitVec 64) uni (_ BitVec 64)
  (_ BitVec 64)) uni)

;; concat_sort
  (assert
  (forall ((a ty))
  (forall ((x119 uni) (x120 (_ BitVec 64)) (x121 (_ BitVec 64)) (x122 uni)
  (x123 (_ BitVec 64)) (x124 (_ BitVec 64))) (sort (map1 t2 a)
  (concat1 a x119 x120 x121 x122 x123 x124)))))

(declare-fun concat2 ((Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

(declare-fun concat3 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) u64) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i34 (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i34) (bvule i34 a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i34) (select a i34)))
     (=> (bvugt i34 a_last)
     (= (select (concat3 a a_first a_last b b_first b_last) i34) (select b (bvadd (bvsub i34 a_last) (bvsub b_first ((_ int2bv 64) 1))))))) :pattern ((select 
  (concat3 a a_first a_last b b_first b_last) i34)) )))))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i34 (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i34) (bvule i34 a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i34) (select a i34)))
     (=> (bvugt i34 a_last)
     (= (select (concat2 a a_first a_last b b_first b_last) i34) (select b (bvadd (bvsub i34 a_last) (bvsub b_first ((_ int2bv 64) 1))))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i34)) )))))

;; concat_def
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (b uni))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i34 (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i34) (bvule i34 a_last))
     (= (get a t2 (concat1 a a1 a_first a_last b b_first b_last) (t2tb i34)) 
     (get a t2 a1 (t2tb i34))))
     (=> (bvugt i34 a_last)
     (= (get a t2 (concat1 a a1 a_first a_last b b_first b_last) (t2tb i34)) 
     (get a t2 b
     (t2tb (bvadd (bvsub i34 a_last) (bvsub b_first ((_ int2bv 64) 1)))))))) :pattern (
  (get a t2 (concat1 a a1 a_first a_last b b_first b_last) (t2tb i34))) ))))))

(declare-fun compare (ty uni (_ BitVec 64) (_ BitVec 64) uni (_ BitVec 64)
  (_ BitVec 64)) Int)

(declare-fun compare1 ((Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)) Int)

(declare-fun compare2 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)) Int)

(declare-fun xorb (ty uni (_ BitVec 64) (_ BitVec 64) uni (_ BitVec 64)
  (_ BitVec 64)) uni)

;; xorb_sort
  (assert
  (forall ((a ty))
  (forall ((x119 uni) (x120 (_ BitVec 64)) (x121 (_ BitVec 64)) (x122 uni)
  (x123 (_ BitVec 64)) (x124 (_ BitVec 64))) (sort (map1 t2 a)
  (xorb a x119 x120 x121 x122 x123 x124)))))

(declare-fun xorb1 ((Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

(declare-fun xorb2 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) u64) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) u64))

(declare-fun andb (ty uni (_ BitVec 64) (_ BitVec 64) uni (_ BitVec 64)
  (_ BitVec 64)) uni)

;; andb_sort
  (assert
  (forall ((a ty))
  (forall ((x119 uni) (x120 (_ BitVec 64)) (x121 (_ BitVec 64)) (x122 uni)
  (x123 (_ BitVec 64)) (x124 (_ BitVec 64))) (sort (map1 t2 a)
  (andb a x119 x120 x121 x122 x123 x124)))))

(declare-fun andb1 ((Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

(declare-fun andb2 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) u64) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) u64))

(declare-fun orb (ty uni (_ BitVec 64) (_ BitVec 64) uni (_ BitVec 64)
  (_ BitVec 64)) uni)

;; orb_sort
  (assert
  (forall ((a ty))
  (forall ((x119 uni) (x120 (_ BitVec 64)) (x121 (_ BitVec 64)) (x122 uni)
  (x123 (_ BitVec 64)) (x124 (_ BitVec 64))) (sort (map1 t2 a)
  (orb a x119 x120 x121 x122 x123 x124)))))

(declare-fun orb1 ((Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

(declare-fun orb2 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) u64) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) u64))

(declare-fun notb (ty uni (_ BitVec 64) (_ BitVec 64)) uni)

;; notb_sort
  (assert
  (forall ((a ty))
  (forall ((x119 uni) (x120 (_ BitVec 64)) (x121 (_ BitVec 64))) (sort
  (map1 t2 a) (notb a x119 x120 x121)))))

(declare-fun notb1 ((Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

(declare-fun notb2 ((Array (_ BitVec 64) u64) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) u64))

(declare-fun singleton (ty uni (_ BitVec 64)) uni)

;; singleton_sort
  (assert
  (forall ((a ty))
  (forall ((x119 uni) (x120 (_ BitVec 64))) (sort (map1 t2 a)
  (singleton a x119 x120)))))

(declare-fun singleton1 (byte (_ BitVec 64)) (Array (_ BitVec 64) byte))

(declare-fun singleton2 (u64 (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; singleton_def
  (assert
  (forall ((v u64))
  (forall ((i34 (_ BitVec 64)))
  (! (= (select (singleton2 v i34) i34) v) :pattern ((select (singleton2 v
                                                             i34) i34)) ))))

;; singleton_def
  (assert
  (forall ((v byte))
  (forall ((i34 (_ BitVec 64)))
  (! (= (select (singleton1 v i34) i34) v) :pattern ((select (singleton1 v
                                                             i34) i34)) ))))

;; singleton_def
  (assert
  (forall ((a ty))
  (forall ((v uni))
  (=> (sort a v)
  (forall ((i34 (_ BitVec 64)))
  (! (= (get a t2 (singleton a v i34) (t2tb i34)) v) :pattern ((get a 
                                                               t2
                                                               (singleton a v
                                                               i34)
                                                               (t2tb i34))) ))))))

(declare-fun first (t) unsigned_64)

(declare-fun last (t) unsigned_64)

(declare-fun mk ((_ BitVec 64) (_ BitVec 64)) t)

;; mk_def
  (assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
  (! (=> (in_range5 f)
     (=> (in_range5 l)
     (and (= (to_rep4 (first (mk f l))) f) (= (to_rep4 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first (_ BitVec 64))
  (range_last (_ BitVec 64)) (low (_ BitVec 64))
  (high (_ BitVec 64))) Bool (and (in_range5 low)
                             (and (in_range5 high)
                             (=> (bvule low high)
                             (and (in_range1 low) (in_range1 high))))))

(declare-sort us_t 0)

(declare-fun us_t1 () ty)

(declare-fun mk___t ((Array (_ BitVec 64) byte) t) us_t)

(declare-fun elts (us_t) (Array (_ BitVec 64) byte))

;; elts_def
  (assert
  (forall ((u (Array (_ BitVec 64) byte)) (u1 t)) (= (elts (mk___t u u1)) u)))

(declare-fun rt (us_t) t)

;; rt_def
  (assert
  (forall ((u (Array (_ BitVec 64) byte)) (u1 t)) (= (rt (mk___t u u1)) u1)))

(define-fun of_array ((a (Array (_ BitVec 64) byte)) (f (_ BitVec 64))
  (l (_ BitVec 64))) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) (_ BitVec 64) (to_rep4 (first (rt a))))

(define-fun last1 ((a us_t)) (_ BitVec 64) (to_rep4 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a))
                                  (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1)
                                  0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array (_ BitVec 64) byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__size a))))

(define-fun bool_eq7 ((x119 us_t)
  (y us_t)) Bool (bool_eq26 (elts x119) (to_rep4 (first (rt x119)))
                 (to_rep4 (last (rt x119))) (elts y) (to_rep4 (first (rt y)))
                 (to_rep4 (last (rt y)))))

(declare-fun user_eq6 (us_t us_t) Bool)

(declare-fun dummy6 () us_t)

;; compare_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (and
     (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq26 a a_first a_last b b_first b_last) true))
     (and
     (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i34 (_ BitVec 64)) (j12 (_ BitVec 64)))
     (and (bvule i34 a_last)
     (and (bvult j12 b_last)
     (and (= (bool_eq26 a a_first i34 b b_first j12) true)
     (or (= i34 a_last)
     (and (bvult i34 a_last)
     (bvult (to_rep5 (select a (bvadd i34 ((_ int2bv 64) 1)))) (to_rep5
                                                               (select b (bvadd j12 ((_ int2bv 64) 1))))))))))))
     (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i34 (_ BitVec 64)) (j12 (_ BitVec 64)))
     (and (bvule i34 b_last)
     (and (bvult j12 a_last)
     (and (= (bool_eq26 a a_first j12 b b_first i34) true)
     (or (= i34 b_last)
     (and (bvult i34 b_last)
     (bvugt (to_rep5 (select a (bvadd j12 ((_ int2bv 64) 1)))) (to_rep5
                                                               (select b (bvadd i34 ((_ int2bv 64) 1)))))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-sort word_count_t 0)

(declare-fun word_count_t1 () ty)

(define-fun in_range7 ((x119 (_ BitVec 64))) Bool (and
                                                  (bvule ((_ int2bv 64) 0) x119)
                                                  (bvule x119 ((_ int2bv 64) 2305843009213693951))))

(define-fun in_range_int6 ((x119 Int)) Bool (and (<= 0 x119)
                                            (<= x119 2305843009213693951)))

(define-fun bool_eq8 ((x119 (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 64)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 64))) (sort us_image
  (attr__ATTRIBUTE_IMAGE7 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (uni) (_ BitVec 64))

(declare-fun to_rep6 (word_count_t) (_ BitVec 64))

(declare-fun of_rep6 ((_ BitVec 64)) word_count_t)

(declare-fun user_eq7 (word_count_t word_count_t) Bool)

(declare-fun dummy7 () word_count_t)

;; inversion_axiom
  (assert
  (forall ((x119 word_count_t))
  (! (= (of_rep6 (to_rep6 x119)) x119) :pattern ((to_rep6 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 word_count_t)) (! (in_range7
  (to_rep6 x119)) :pattern ((to_rep6 x119)) )))

(define-fun to_int8 ((x119 word_count_t)) Int (bv2nat (to_rep6 x119)))

;; range_int_axiom
  (assert
  (forall ((x119 word_count_t)) (! (in_range_int6
  (to_int8 x119)) :pattern ((to_int8 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 64)))
  (! (= (to_rep6 (of_rep6 x119)) x119) :pattern ((to_rep6 (of_rep6 x119))) )))

(declare-sort t4 0)

(declare-fun t5 () ty)

(declare-fun first2 (t4) unsigned_64)

(declare-fun last2 (t4) unsigned_64)

(declare-fun mk1 ((_ BitVec 64) (_ BitVec 64)) t4)

;; mk_def
  (assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
  (! (=> (in_range5 f)
     (=> (in_range5 l)
     (and (= (to_rep4 (first2 (mk1 f l))) f)
     (= (to_rep4 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property1 ((range_first (_ BitVec 64))
  (range_last (_ BitVec 64)) (low (_ BitVec 64))
  (high (_ BitVec 64))) Bool (and (in_range5 low)
                             (and (in_range5 high)
                             (=> (bvule low high)
                             (and (in_range7 low) (in_range7 high))))))

(declare-sort us_t2 0)

(declare-fun us_t3 () ty)

(declare-fun mk___t1 ((Array (_ BitVec 64) u64) t4) us_t2)

(declare-fun elts1 (us_t2) (Array (_ BitVec 64) u64))

;; elts_def
  (assert
  (forall ((u (Array (_ BitVec 64) u64)) (u1 t4))
  (= (elts1 (mk___t1 u u1)) u)))

(declare-fun rt1 (us_t2) t4)

;; rt_def
  (assert
  (forall ((u (Array (_ BitVec 64) u64)) (u1 t4))
  (= (rt1 (mk___t1 u u1)) u1)))

(define-fun of_array1 ((a (Array (_ BitVec 64) u64)) (f (_ BitVec 64))
  (l (_ BitVec 64))) us_t2 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t2)) (_ BitVec 64) (to_rep4 (first2 (rt1 a))))

(define-fun last3 ((a us_t2)) (_ BitVec 64) (to_rep4 (last2 (rt1 a))))

(define-fun length1 ((a us_t2)) Int (ite (bvule (first3 a) (last3 a))
                                    (+ (- (bv2nat (last3 a)) (bv2nat 
                                    (first3 a))) 1) 0))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array (_ BitVec 64) u64)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__size1 a))))

(define-fun bool_eq9 ((x119 us_t2)
  (y us_t2)) Bool (bool_eq29 (elts1 x119) (to_rep4 (first2 (rt1 x119)))
                  (to_rep4 (last2 (rt1 x119))) (elts1 y)
                  (to_rep4 (first2 (rt1 y))) (to_rep4 (last2 (rt1 y)))))

(declare-fun user_eq8 (us_t2 us_t2) Bool)

(declare-fun dummy8 () us_t2)

;; compare_def
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (and
     (= (= (compare2 a a_first a_last b b_first b_last) 0)
     (= (bool_eq29 a a_first a_last b b_first b_last) true))
     (and
     (= (< (compare2 a a_first a_last b b_first b_last) 0)
     (exists ((i34 (_ BitVec 64)) (j12 (_ BitVec 64)))
     (and (bvule i34 a_last)
     (and (bvult j12 b_last)
     (and (= (bool_eq29 a a_first i34 b b_first j12) true)
     (or (= i34 a_last)
     (and (bvult i34 a_last)
     (bvult (to_rep (select a (bvadd i34 ((_ int2bv 64) 1)))) (to_rep
                                                              (select b (bvadd j12 ((_ int2bv 64) 1))))))))))))
     (= (< 0 (compare2 a a_first a_last b b_first b_last))
     (exists ((i34 (_ BitVec 64)) (j12 (_ BitVec 64)))
     (and (bvule i34 b_last)
     (and (bvult j12 a_last)
     (and (= (bool_eq29 a a_first j12 b b_first i34) true)
     (or (= i34 b_last)
     (and (bvult i34 b_last)
     (bvugt (to_rep (select a (bvadd j12 ((_ int2bv 64) 1)))) (to_rep
                                                              (select b (bvadd i34 ((_ int2bv 64) 1)))))))))))))) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

(define-fun in_range8 ((x119 (_ BitVec 64))) Bool (and
                                                  (bvule ((_ int2bv 64) 0) x119)
                                                  (bvule x119 ((_ int2bv 64) 18446744073709551608))))

(define-fun in_range_int7 ((x119 Int)) Bool (and (<= 0 x119)
                                            (<= x119 18446744073709551608)))

(define-fun bool_eq10 ((x119 (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 64)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 64))) (sort us_image
  (attr__ATTRIBUTE_IMAGE8 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (uni) (_ BitVec 64))

(declare-fun to_rep7 (hash_bit_length) (_ BitVec 64))

(declare-fun of_rep7 ((_ BitVec 64)) hash_bit_length)

(declare-fun user_eq12 (hash_bit_length hash_bit_length) Bool)

(declare-fun dummy12 () hash_bit_length)

;; inversion_axiom
  (assert
  (forall ((x119 hash_bit_length))
  (! (= (of_rep7 (to_rep7 x119)) x119) :pattern ((to_rep7 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 hash_bit_length)) (! (in_range8
  (to_rep7 x119)) :pattern ((to_rep7 x119)) )))

(define-fun to_int9 ((x119 hash_bit_length)) Int (bv2nat (to_rep7 x119)))

;; range_int_axiom
  (assert
  (forall ((x119 hash_bit_length)) (! (in_range_int7
  (to_int9 x119)) :pattern ((to_int9 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 64)))
  (! (= (to_rep7 (of_rep7 x119)) x119) :pattern ((to_rep7 (of_rep7 x119))) )))

(declare-sort initialized_hash_bit_length 0)

(declare-fun initialized_hash_bit_length1 () ty)

(define-fun in_range9 ((x119 (_ BitVec 64))) Bool (and
                                                  (bvule ((_ int2bv 64) 1) x119)
                                                  (bvule x119 ((_ int2bv 64) 18446744073709551608))))

(define-fun in_range_int8 ((x119 Int)) Bool (and (<= 1 x119)
                                            (<= x119 18446744073709551608)))

(define-fun bool_eq11 ((x119 (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 ((_ BitVec 64)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 64))) (sort us_image
  (attr__ATTRIBUTE_IMAGE9 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (uni) (_ BitVec 64))

(declare-fun to_rep8 (initialized_hash_bit_length) (_ BitVec 64))

(declare-fun of_rep8 ((_ BitVec 64)) initialized_hash_bit_length)

(declare-fun user_eq13 (initialized_hash_bit_length
  initialized_hash_bit_length) Bool)

(declare-fun dummy13 () initialized_hash_bit_length)

;; inversion_axiom
  (assert
  (forall ((x119 initialized_hash_bit_length))
  (! (= (of_rep8 (to_rep8 x119)) x119) :pattern ((to_rep8 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 initialized_hash_bit_length)) (! (in_range9
  (to_rep8 x119)) :pattern ((to_rep8 x119)) )))

(define-fun to_int10 ((x119 initialized_hash_bit_length)) Int (bv2nat 
  (to_rep8 x119)))

;; range_int_axiom
  (assert
  (forall ((x119 initialized_hash_bit_length)) (! (in_range_int8
  (to_int10 x119)) :pattern ((to_int10 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 64)))
  (! (= (to_rep8 (of_rep8 x119)) x119) :pattern ((to_rep8 (of_rep8 x119))) )))

(declare-sort skein_512_state_words_index 0)

(declare-fun skein_512_state_words_index1 () ty)

(define-fun in_range10 ((x119 (_ BitVec 64))) Bool (and
                                                   (bvule ((_ int2bv 64) 0) x119)
                                                   (bvule x119 ((_ int2bv 64) 7))))

(define-fun in_range_int9 ((x119 Int)) Bool (and (<= 0 x119) (<= x119 7)))

(define-fun bool_eq12 ((x119 (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE10 ((_ BitVec 64)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 64))) (sort us_image
  (attr__ATTRIBUTE_IMAGE10 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (uni) (_ BitVec 64))

(declare-fun to_rep9 (skein_512_state_words_index) (_ BitVec 64))

(declare-fun of_rep9 ((_ BitVec 64)) skein_512_state_words_index)

(declare-fun user_eq14 (skein_512_state_words_index
  skein_512_state_words_index) Bool)

(declare-fun dummy14 () skein_512_state_words_index)

;; inversion_axiom
  (assert
  (forall ((x119 skein_512_state_words_index))
  (! (= (of_rep9 (to_rep9 x119)) x119) :pattern ((to_rep9 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 skein_512_state_words_index)) (! (in_range10
  (to_rep9 x119)) :pattern ((to_rep9 x119)) )))

(define-fun to_int11 ((x119 skein_512_state_words_index)) Int (bv2nat 
  (to_rep9 x119)))

;; range_int_axiom
  (assert
  (forall ((x119 skein_512_state_words_index)) (! (in_range_int9
  (to_int11 x119)) :pattern ((to_int11 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 64)))
  (! (= (to_rep9 (of_rep9 x119)) x119) :pattern ((to_rep9 (of_rep9 x119))) )))

(declare-fun dummy15 () (Array (_ BitVec 64) u64))

(declare-fun value__size5 () Int)

(declare-fun object__size5 ((Array (_ BitVec 64) u64)) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__size5 a))))

(declare-fun user_eq15 ((Array (_ BitVec 64) u64)
  (Array (_ BitVec 64) u64)) Bool)

;; compare_def
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (and
     (= (= (compare2 a a_first a_last b b_first b_last) 0)
     (= (bool_eq29 a a_first a_last b b_first b_last) true))
     (and
     (= (< (compare2 a a_first a_last b b_first b_last) 0)
     (exists ((i34 (_ BitVec 64)) (j12 (_ BitVec 64)))
     (and (bvule i34 a_last)
     (and (bvult j12 b_last)
     (and (= (bool_eq29 a a_first i34 b b_first j12) true)
     (or (= i34 a_last)
     (and (bvult i34 a_last)
     (bvult (to_rep (select a (bvadd i34 ((_ int2bv 64) 1)))) (to_rep
                                                              (select b (bvadd j12 ((_ int2bv 64) 1))))))))))))
     (= (< 0 (compare2 a a_first a_last b b_first b_last))
     (exists ((i34 (_ BitVec 64)) (j12 (_ BitVec 64)))
     (and (bvule i34 b_last)
     (and (bvult j12 a_last)
     (and (= (bool_eq29 a a_first j12 b b_first i34) true)
     (or (= i34 b_last)
     (and (bvult i34 b_last)
     (bvugt (to_rep (select a (bvadd j12 ((_ int2bv 64) 1)))) (to_rep
                                                              (select b (bvadd i34 ((_ int2bv 64) 1)))))))))))))) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

(declare-sort skein_512_block_bytes_count 0)

(declare-fun skein_512_block_bytes_count1 () ty)

(define-fun in_range11 ((x119 (_ BitVec 64))) Bool (and
                                                   (bvule ((_ int2bv 64) 0) x119)
                                                   (bvule x119 ((_ int2bv 64) 64))))

(define-fun in_range_int10 ((x119 Int)) Bool (and (<= 0 x119) (<= x119 64)))

(define-fun bool_eq13 ((x119 (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE11 ((_ BitVec 64)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 64))) (sort us_image
  (attr__ATTRIBUTE_IMAGE11 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (uni) (_ BitVec 64))

(declare-fun to_rep10 (skein_512_block_bytes_count) (_ BitVec 64))

(declare-fun of_rep10 ((_ BitVec 64)) skein_512_block_bytes_count)

(declare-fun user_eq16 (skein_512_block_bytes_count
  skein_512_block_bytes_count) Bool)

(declare-fun dummy16 () skein_512_block_bytes_count)

;; inversion_axiom
  (assert
  (forall ((x119 skein_512_block_bytes_count))
  (! (= (of_rep10 (to_rep10 x119)) x119) :pattern ((to_rep10 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 skein_512_block_bytes_count)) (! (in_range11
  (to_rep10 x119)) :pattern ((to_rep10 x119)) )))

(define-fun to_int12 ((x119 skein_512_block_bytes_count)) Int (bv2nat 
  (to_rep10 x119)))

;; range_int_axiom
  (assert
  (forall ((x119 skein_512_block_bytes_count)) (! (in_range_int10
  (to_int12 x119)) :pattern ((to_int12 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 64)))
  (! (= (to_rep10 (of_rep10 x119)) x119) :pattern ((to_rep10 (of_rep10 x119))) )))

(declare-sort skein_512_block_bytes_index 0)

(declare-fun skein_512_block_bytes_index1 () ty)

(define-fun in_range24 ((x119 (_ BitVec 64))) Bool (and
                                                   (bvule ((_ int2bv 64) 0) x119)
                                                   (bvule x119 ((_ int2bv 64) 63))))

(define-fun in_range_int23 ((x119 Int)) Bool (and (<= 0 x119) (<= x119 63)))

(define-fun bool_eq33 ((x119 (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE25 ((_ BitVec 64)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 64))) (sort us_image
  (attr__ATTRIBUTE_IMAGE25 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check25 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE25 (uni) (_ BitVec 64))

(declare-fun to_rep23 (skein_512_block_bytes_index) (_ BitVec 64))

(declare-fun of_rep23 ((_ BitVec 64)) skein_512_block_bytes_index)

(declare-fun user_eq45 (skein_512_block_bytes_index
  skein_512_block_bytes_index) Bool)

(declare-fun dummy45 () skein_512_block_bytes_index)

;; inversion_axiom
  (assert
  (forall ((x119 skein_512_block_bytes_index))
  (! (= (of_rep23 (to_rep23 x119)) x119) :pattern ((to_rep23 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 skein_512_block_bytes_index)) (! (in_range24
  (to_rep23 x119)) :pattern ((to_rep23 x119)) )))

(define-fun to_int25 ((x119 skein_512_block_bytes_index)) Int (bv2nat 
  (to_rep23 x119)))

;; range_int_axiom
  (assert
  (forall ((x119 skein_512_block_bytes_index)) (! (in_range_int23
  (to_int25 x119)) :pattern ((to_int25 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 64)))
  (! (= (to_rep23 (of_rep23 x119)) x119) :pattern ((to_rep23 (of_rep23 x119))) )))

(declare-fun dummy24 () (Array (_ BitVec 64) byte))

(declare-fun value__size8 () Int)

(declare-fun object__size8 ((Array (_ BitVec 64) byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__size8 a))))

(declare-fun user_eq24 ((Array (_ BitVec 64) byte)
  (Array (_ BitVec 64) byte)) Bool)

;; compare_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (and
     (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq26 a a_first a_last b b_first b_last) true))
     (and
     (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i34 (_ BitVec 64)) (j12 (_ BitVec 64)))
     (and (bvule i34 a_last)
     (and (bvult j12 b_last)
     (and (= (bool_eq26 a a_first i34 b b_first j12) true)
     (or (= i34 a_last)
     (and (bvult i34 a_last)
     (bvult (to_rep5 (select a (bvadd i34 ((_ int2bv 64) 1)))) (to_rep5
                                                               (select b (bvadd j12 ((_ int2bv 64) 1))))))))))))
     (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i34 (_ BitVec 64)) (j12 (_ BitVec 64)))
     (and (bvule i34 b_last)
     (and (bvult j12 a_last)
     (and (= (bool_eq26 a a_first j12 b b_first i34) true)
     (or (= i34 b_last)
     (and (bvult i34 b_last)
     (bvugt (to_rep5 (select a (bvadd j12 ((_ int2bv 64) 1)))) (to_rep5
                                                               (select b (bvadd i34 ((_ int2bv 64) 1)))))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(define-fun in_range15 ((x119 (_ BitVec 8))) Bool (and
                                                  (bvule ((_ int2bv 8) 0) x119)
                                                  (bvule x119 ((_ int2bv 8) 127))))

(define-fun in_range_int14 ((x119 Int)) Bool (and (<= 0 x119) (<= x119 127)))

(define-fun bool_eq17 ((x119 (_ BitVec 8))
  (y (_ BitVec 8))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE15 ((_ BitVec 8)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 8))) (sort us_image
  (attr__ATTRIBUTE_IMAGE15 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE15 (uni) (_ BitVec 8))

(declare-fun to_rep14 (u7) (_ BitVec 8))

(declare-fun of_rep14 ((_ BitVec 8)) u7)

(declare-fun user_eq20 (u7 u7) Bool)

(declare-fun dummy20 () u7)

;; inversion_axiom
  (assert
  (forall ((x119 u7))
  (! (= (of_rep14 (to_rep14 x119)) x119) :pattern ((to_rep14 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 u7)) (! (in_range15
  (to_rep14 x119)) :pattern ((to_rep14 x119)) )))

(define-fun to_int16 ((x119 u7)) Int (bv2nat (to_rep14 x119)))

;; range_int_axiom
  (assert
  (forall ((x119 u7)) (! (in_range_int14
  (to_int16 x119)) :pattern ((to_int16 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 8)))
  (! (let ((y (bvurem x119 ((_ int2bv 8) 128))))
     (=> (in_range15 y) (= (to_rep14 (of_rep14 x119)) y))) :pattern (
  (to_rep14 (of_rep14 x119))) )))

(define-fun in_range16 ((x119 (_ BitVec 8))) Bool (and
                                                  (bvule ((_ int2bv 8) 0) x119)
                                                  (bvule x119 ((_ int2bv 8) 63))))

(define-fun in_range_int15 ((x119 Int)) Bool (and (<= 0 x119) (<= x119 63)))

(define-fun bool_eq18 ((x119 (_ BitVec 8))
  (y (_ BitVec 8))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE16 ((_ BitVec 8)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 8))) (sort us_image
  (attr__ATTRIBUTE_IMAGE16 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE16 (uni) (_ BitVec 8))

(declare-fun to_rep15 (u6) (_ BitVec 8))

(declare-fun of_rep15 ((_ BitVec 8)) u6)

(declare-fun user_eq21 (u6 u6) Bool)

(declare-fun dummy21 () u6)

;; inversion_axiom
  (assert
  (forall ((x119 u6))
  (! (= (of_rep15 (to_rep15 x119)) x119) :pattern ((to_rep15 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 u6)) (! (in_range16
  (to_rep15 x119)) :pattern ((to_rep15 x119)) )))

(define-fun to_int17 ((x119 u6)) Int (bv2nat (to_rep15 x119)))

;; range_int_axiom
  (assert
  (forall ((x119 u6)) (! (in_range_int15
  (to_int17 x119)) :pattern ((to_int17 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 8)))
  (! (let ((y (bvurem x119 ((_ int2bv 8) 64))))
     (=> (in_range16 y) (= (to_rep15 (of_rep15 x119)) y))) :pattern (
  (to_rep15 (of_rep15 x119))) )))

(declare-fun mk___split_fields (u64 u32 u16 u7 Bool u6 Bool
  Bool) us_split_fields)

(declare-fun rec__byte_count_lsb (us_split_fields) u64)

;; rec__byte_count_lsb_def
  (assert
  (forall ((u u64) (u1 u32) (u2 u16) (u3 u7) (u4 Bool) (u5 u6) (u8 Bool)
  (u9 Bool))
  (= (rec__byte_count_lsb (mk___split_fields u u1 u2 u3 u4 u5 u8 u9)) u)))

(declare-fun rec__byte_count_msb (us_split_fields) u32)

;; rec__byte_count_msb_def
  (assert
  (forall ((u u64) (u1 u32) (u2 u16) (u3 u7) (u4 Bool) (u5 u6) (u8 Bool)
  (u9 Bool))
  (= (rec__byte_count_msb (mk___split_fields u u1 u2 u3 u4 u5 u8 u9)) u1)))

(declare-fun rec__reserved (us_split_fields) u16)

;; rec__reserved_def
  (assert
  (forall ((u u64) (u1 u32) (u2 u16) (u3 u7) (u4 Bool) (u5 u6) (u8 Bool)
  (u9 Bool))
  (= (rec__reserved (mk___split_fields u u1 u2 u3 u4 u5 u8 u9)) u2)))

(declare-fun rec__tree_level (us_split_fields) u7)

;; rec__tree_level_def
  (assert
  (forall ((u u64) (u1 u32) (u2 u16) (u3 u7) (u4 Bool) (u5 u6) (u8 Bool)
  (u9 Bool))
  (= (rec__tree_level (mk___split_fields u u1 u2 u3 u4 u5 u8 u9)) u3)))

(declare-fun rec__bit_pad (us_split_fields) Bool)

;; rec__bit_pad_def
  (assert
  (forall ((u u64) (u1 u32) (u2 u16) (u3 u7) (u4 Bool) (u5 u6) (u8 Bool)
  (u9 Bool))
  (= (rec__bit_pad (mk___split_fields u u1 u2 u3 u4 u5 u8 u9)) u4)))

(declare-fun rec__field_type (us_split_fields) u6)

;; rec__field_type_def
  (assert
  (forall ((u u64) (u1 u32) (u2 u16) (u3 u7) (u4 Bool) (u5 u6) (u8 Bool)
  (u9 Bool))
  (= (rec__field_type (mk___split_fields u u1 u2 u3 u4 u5 u8 u9)) u5)))

(declare-fun rec__first_block (us_split_fields) Bool)

;; rec__first_block_def
  (assert
  (forall ((u u64) (u1 u32) (u2 u16) (u3 u7) (u4 Bool) (u5 u6) (u8 Bool)
  (u9 Bool))
  (= (rec__first_block (mk___split_fields u u1 u2 u3 u4 u5 u8 u9)) u8)))

(declare-fun rec__final_block (us_split_fields) Bool)

;; rec__final_block_def
  (assert
  (forall ((u u64) (u1 u32) (u2 u16) (u3 u7) (u4 Bool) (u5 u6) (u8 Bool)
  (u9 Bool))
  (= (rec__final_block (mk___split_fields u u1 u2 u3 u4 u5 u8 u9)) u9)))

(declare-fun mk_tweak_value (us_split_fields) tweak_value)

(declare-fun us_split_fields2 (tweak_value) us_split_fields)

;; __split_fields_def
  (assert
  (forall ((u us_split_fields)) (= (us_split_fields2 (mk_tweak_value u)) u)))

(define-fun bool_eq19 ((a tweak_value)
  (b tweak_value)) Bool (ite (and
                             (and
                             (and
                             (and
                             (and
                             (and
                             (and
                             (= (to_rep
                                (rec__byte_count_lsb (us_split_fields2 a))) 
                             (to_rep
                             (rec__byte_count_lsb (us_split_fields2 b))))
                             (= (to_rep13
                                (rec__byte_count_msb (us_split_fields2 a))) 
                             (to_rep13
                             (rec__byte_count_msb (us_split_fields2 b)))))
                             (= (to_rep12
                                (rec__reserved (us_split_fields2 a))) 
                             (to_rep12 (rec__reserved (us_split_fields2 b)))))
                             (= (to_rep14
                                (rec__tree_level (us_split_fields2 a))) 
                             (to_rep14
                             (rec__tree_level (us_split_fields2 b)))))
                             (= (rec__bit_pad (us_split_fields2 a)) (rec__bit_pad
                                                                    (us_split_fields2
                                                                    b))))
                             (= (to_rep15
                                (rec__field_type (us_split_fields2 a))) 
                             (to_rep15
                             (rec__field_type (us_split_fields2 b)))))
                             (= (rec__first_block (us_split_fields2 a)) 
                             (rec__first_block (us_split_fields2 b))))
                             (= (rec__final_block (us_split_fields2 a)) 
                             (rec__final_block (us_split_fields2 b))))
                        true false))

(declare-fun user_eq22 (tweak_value tweak_value) Bool)

(declare-fun value__size6 () Int)

(declare-fun object__size6 (tweak_value) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a tweak_value)) (<= 0 (object__size6 a))))

(declare-fun dummy22 () tweak_value)

(declare-fun mk___split_fields1 (tweak_value hash_bit_length
  u64) us_split_fields3)

(declare-fun rec__tweak_words (us_split_fields3) tweak_value)

;; rec__tweak_words_def
  (assert
  (forall ((u tweak_value) (u1 hash_bit_length) (u2 u64))
  (= (rec__tweak_words (mk___split_fields1 u u1 u2)) u)))

(declare-fun rec__hash_bit_len (us_split_fields3) hash_bit_length)

;; rec__hash_bit_len_def
  (assert
  (forall ((u tweak_value) (u1 hash_bit_length) (u2 u64))
  (= (rec__hash_bit_len (mk___split_fields1 u u1 u2)) u1)))

(declare-fun rec__byte_count (us_split_fields3) u64)

;; rec__byte_count_def
  (assert
  (forall ((u tweak_value) (u1 hash_bit_length) (u2 u64))
  (= (rec__byte_count (mk___split_fields1 u u1 u2)) u2)))

(declare-fun mk_context_header (us_split_fields3) context_header)

(declare-fun us_split_fields5 (context_header) us_split_fields3)

;; __split_fields_def
  (assert
  (forall ((u us_split_fields3))
  (= (us_split_fields5 (mk_context_header u)) u)))

(define-fun bool_eq20 ((a context_header)
  (b context_header)) Bool (ite (and
                                (and
                                (= (bool_eq19
                                   (rec__tweak_words (us_split_fields5 a))
                                   (rec__tweak_words (us_split_fields5 b))) true)
                                (= (to_rep7
                                   (rec__hash_bit_len (us_split_fields5 a))) 
                                (to_rep7
                                (rec__hash_bit_len (us_split_fields5 b)))))
                                (= (to_rep
                                   (rec__byte_count (us_split_fields5 a))) 
                                (to_rep
                                (rec__byte_count (us_split_fields5 b)))))
                           true false))

(declare-fun user_eq23 (context_header context_header) Bool)

(declare-fun value__size7 () Int)

(declare-fun object__size7 (context_header) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a context_header)) (<= 0 (object__size7 a))))

(declare-fun dummy23 () context_header)

(declare-fun mk___split_fields2 (context_header (Array (_ BitVec 64) u64)
  (Array (_ BitVec 64) byte)) us_split_fields6)

(declare-fun rec__h (us_split_fields6) context_header)

;; rec__h_def
  (assert
  (forall ((u context_header) (u1 (Array (_ BitVec 64) u64))
  (u2 (Array (_ BitVec 64) byte)))
  (= (rec__h (mk___split_fields2 u u1 u2)) u)))

(declare-fun rec__x (us_split_fields6) (Array (_ BitVec 64) u64))

;; rec__x_def
  (assert
  (forall ((u context_header) (u1 (Array (_ BitVec 64) u64))
  (u2 (Array (_ BitVec 64) byte)))
  (= (rec__x (mk___split_fields2 u u1 u2)) u1)))

(declare-fun rec__b (us_split_fields6) (Array (_ BitVec 64) byte))

;; rec__b_def
  (assert
  (forall ((u context_header) (u1 (Array (_ BitVec 64) u64))
  (u2 (Array (_ BitVec 64) byte)))
  (= (rec__b (mk___split_fields2 u u1 u2)) u2)))

(declare-fun mk_skein_512_context (us_split_fields6) skein_512_context)

(declare-fun us_split_fields8 (skein_512_context) us_split_fields6)

;; __split_fields_def
  (assert
  (forall ((u us_split_fields6))
  (= (us_split_fields8 (mk_skein_512_context u)) u)))

(define-fun bool_eq21 ((a skein_512_context)
  (b skein_512_context)) Bool (ite (and
                                   (and
                                   (= (bool_eq20
                                      (rec__h (us_split_fields8 a))
                                      (rec__h (us_split_fields8 b))) true)
                                   (= (bool_eq29
                                      (rec__x (us_split_fields8 a))
                                      ((_ int2bv 64) 0) ((_ int2bv 64) 7)
                                      (rec__x (us_split_fields8 b))
                                      ((_ int2bv 64) 0) ((_ int2bv 64) 7)) true))
                                   (= (bool_eq26
                                      (rec__b (us_split_fields8 a))
                                      ((_ int2bv 64) 0) ((_ int2bv 64) 63)
                                      (rec__b (us_split_fields8 b))
                                      ((_ int2bv 64) 0) ((_ int2bv 64) 63)) true))
                              true false))

(declare-fun user_eq25 (skein_512_context skein_512_context) Bool)

(declare-fun value__size9 () Int)

(declare-fun object__size9 (skein_512_context) Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (forall ((a skein_512_context)) (<= 0 (object__size9 a))))

(declare-fun dummy25 () skein_512_context)

(declare-fun hash_bit_len_of (skein_512_context) (_ BitVec 64))

;; hash_bit_len_of__post_axiom
  (assert
  (forall ((ctx1 skein_512_context)) (! (in_range8
  (hash_bit_len_of ctx1)) :pattern ((hash_bit_len_of ctx1)) )))

;; hash_bit_len_of__def_axiom
  (assert
  (forall ((ctx1 skein_512_context))
  (! (= (hash_bit_len_of ctx1) (to_rep7
                               (rec__hash_bit_len
                               (us_split_fields5
                               (rec__h (us_split_fields8 ctx1)))))) :pattern (
  (hash_bit_len_of ctx1)) )))

(declare-fun byte_count_of (skein_512_context) (_ BitVec 64))

;; byte_count_of__post_axiom
  (assert
  (forall ((ctx1 skein_512_context)) (! (in_range1
  (byte_count_of ctx1)) :pattern ((byte_count_of ctx1)) )))

;; byte_count_of__def_axiom
  (assert
  (forall ((ctx1 skein_512_context))
  (! (= (byte_count_of ctx1) (to_rep
                             (rec__byte_count
                             (us_split_fields5
                             (rec__h (us_split_fields8 ctx1)))))) :pattern (
  (byte_count_of ctx1)) )))

(declare-fun ctx () skein_512_context)

(define-fun dynamic_property4 ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x119 (_ BitVec 64))) Bool (and (bvule first_int x119)
                             (bvule x119 last_int)))

(define-fun dynamic_property_int1 ((first_int Int) (last_int Int)
  (x119 Int)) Bool (and (<= first_int x119) (<= x119 last_int)))

(define-fun bool_eq34 ((x119 (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE26 ((_ BitVec 64)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 64))) (sort us_image
  (attr__ATTRIBUTE_IMAGE26 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check26 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE26 (uni) (_ BitVec 64))

(declare-fun user_eq46 (unsigned_64 unsigned_64) Bool)

(declare-fun dummy46 () unsigned_64)

(declare-sort t12 0)

(declare-fun t13 () ty)

(declare-fun first6 (t12) unsigned_64)

(declare-fun last6 (t12) unsigned_64)

(declare-fun mk3 ((_ BitVec 64) (_ BitVec 64)) t12)

;; mk_def
  (assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
  (! (=> (in_range5 f)
     (=> (in_range5 l)
     (and (= (to_rep4 (first6 (mk3 f l))) f)
     (= (to_rep4 (last6 (mk3 f l))) l)))) :pattern ((mk3 f l)) )))

(define-fun dynamic_property5 ((range_first (_ BitVec 64))
  (range_last (_ BitVec 64)) (low (_ BitVec 64))
  (high (_ BitVec 64))) Bool (and (in_range5 low)
                             (and (in_range5 high)
                             (=> (bvule low high)
                             (and (dynamic_property4 range_first range_last
                             low) (dynamic_property4 range_first range_last
                             high))))))

(declare-sort us_t8 0)

(declare-fun us_t9 () ty)

(declare-fun mk___t3 ((Array (_ BitVec 64) byte) t12) us_t8)

(declare-fun elts3 (us_t8) (Array (_ BitVec 64) byte))

;; elts_def
  (assert
  (forall ((u (Array (_ BitVec 64) byte)) (u1 t12))
  (= (elts3 (mk___t3 u u1)) u)))

(declare-fun rt3 (us_t8) t12)

;; rt_def
  (assert
  (forall ((u (Array (_ BitVec 64) byte)) (u1 t12))
  (= (rt3 (mk___t3 u u1)) u1)))

(define-fun of_array3 ((a (Array (_ BitVec 64) byte)) (f (_ BitVec 64))
  (l (_ BitVec 64))) us_t8 (mk___t3 a (mk3 f l)))

(define-fun first7 ((a us_t8)) (_ BitVec 64) (to_rep4 (first6 (rt3 a))))

(define-fun last7 ((a us_t8)) (_ BitVec 64) (to_rep4 (last6 (rt3 a))))

(define-fun length3 ((a us_t8)) Int (ite (bvule (first7 a) (last7 a))
                                    (+ (- (bv2nat (last7 a)) (bv2nat 
                                    (first7 a))) 1) 0))

(declare-fun value__size21 () Int)

(declare-fun object__size21 ((Array (_ BitVec 64) byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size21))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__size21 a))))

(define-fun bool_eq35 ((x119 us_t8)
  (y us_t8)) Bool (bool_eq26 (elts3 x119) (to_rep4 (first6 (rt3 x119)))
                  (to_rep4 (last6 (rt3 x119))) (elts3 y)
                  (to_rep4 (first6 (rt3 y))) (to_rep4 (last6 (rt3 y)))))

(declare-fun user_eq47 (us_t8 us_t8) Bool)

(declare-fun dummy47 () us_t8)

;; compare_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (and
     (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq26 a a_first a_last b b_first b_last) true))
     (and
     (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i34 (_ BitVec 64)) (j12 (_ BitVec 64)))
     (and (bvule i34 a_last)
     (and (bvult j12 b_last)
     (and (= (bool_eq26 a a_first i34 b b_first j12) true)
     (or (= i34 a_last)
     (and (bvult i34 a_last)
     (bvult (to_rep5 (select a (bvadd i34 ((_ int2bv 64) 1)))) (to_rep5
                                                               (select b (bvadd j12 ((_ int2bv 64) 1))))))))))))
     (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i34 (_ BitVec 64)) (j12 (_ BitVec 64)))
     (and (bvule i34 b_last)
     (and (bvult j12 a_last)
     (and (= (bool_eq26 a a_first j12 b b_first i34) true)
     (or (= i34 b_last)
     (and (bvult i34 b_last)
     (bvugt (to_rep5 (select a (bvadd j12 ((_ int2bv 64) 1)))) (to_rep5
                                                               (select b (bvadd i34 ((_ int2bv 64) 1)))))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun hash__first () unsigned_64)

(declare-fun hash__last () unsigned_64)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-fun add_in_range ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-sort output_byte_count_t 0)

(declare-fun output_byte_count_t1 () ty)

(define-fun in_range25 ((x119 (_ BitVec 64))) Bool (and
                                                   (bvule ((_ int2bv 64) 1) x119)
                                                   (bvule x119 ((_ int2bv 64) 2305843009213693951))))

(define-fun in_range_int24 ((x119 Int)) Bool (and (<= 1 x119)
                                             (<= x119 2305843009213693951)))

(define-fun bool_eq36 ((x119 (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE27 ((_ BitVec 64)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 64))) (sort us_image
  (attr__ATTRIBUTE_IMAGE27 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check27 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE27 (uni) (_ BitVec 64))

(declare-fun to_rep24 (output_byte_count_t) (_ BitVec 64))

(declare-fun of_rep24 ((_ BitVec 64)) output_byte_count_t)

(declare-fun user_eq48 (output_byte_count_t output_byte_count_t) Bool)

(declare-fun dummy48 () output_byte_count_t)

;; inversion_axiom
  (assert
  (forall ((x119 output_byte_count_t))
  (! (= (of_rep24 (to_rep24 x119)) x119) :pattern ((to_rep24 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 output_byte_count_t)) (! (in_range25
  (to_rep24 x119)) :pattern ((to_rep24 x119)) )))

(define-fun to_int26 ((x119 output_byte_count_t)) Int (bv2nat (to_rep24 x119)))

;; range_int_axiom
  (assert
  (forall ((x119 output_byte_count_t)) (! (in_range_int24
  (to_int26 x119)) :pattern ((to_int26 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 64)))
  (! (= (to_rep24 (of_rep24 x119)) x119) :pattern ((to_rep24 (of_rep24 x119))) )))

(declare-sort output_block_count_t 0)

(declare-fun output_block_count_t1 () ty)

(define-fun in_range26 ((x119 (_ BitVec 64))) Bool (and
                                                   (bvule ((_ int2bv 64) 0) x119)
                                                   (bvule x119 ((_ int2bv 64) 36028797018963968))))

(define-fun in_range_int25 ((x119 Int)) Bool (and (<= 0 x119)
                                             (<= x119 36028797018963968)))

(define-fun bool_eq37 ((x119 (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE28 ((_ BitVec 64)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 64))) (sort us_image
  (attr__ATTRIBUTE_IMAGE28 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check28 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE28 (uni) (_ BitVec 64))

(declare-fun to_rep25 (output_block_count_t) (_ BitVec 64))

(declare-fun of_rep25 ((_ BitVec 64)) output_block_count_t)

(declare-fun user_eq49 (output_block_count_t output_block_count_t) Bool)

(declare-fun dummy49 () output_block_count_t)

;; inversion_axiom
  (assert
  (forall ((x119 output_block_count_t))
  (! (= (of_rep25 (to_rep25 x119)) x119) :pattern ((to_rep25 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 output_block_count_t)) (! (in_range26
  (to_rep25 x119)) :pattern ((to_rep25 x119)) )))

(define-fun to_int27 ((x119 output_block_count_t)) Int (bv2nat (to_rep25
                                                               x119)))

;; range_int_axiom
  (assert
  (forall ((x119 output_block_count_t)) (! (in_range_int25
  (to_int27 x119)) :pattern ((to_int27 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 64)))
  (! (= (to_rep25 (of_rep25 x119)) x119) :pattern ((to_rep25 (of_rep25 x119))) )))

(declare-sort positive_output_block_count_t 0)

(declare-fun positive_output_block_count_t1 () ty)

(define-fun in_range27 ((x119 (_ BitVec 64))) Bool (and
                                                   (bvule ((_ int2bv 64) 1) x119)
                                                   (bvule x119 ((_ int2bv 64) 36028797018963968))))

(define-fun in_range_int26 ((x119 Int)) Bool (and (<= 1 x119)
                                             (<= x119 36028797018963968)))

(define-fun bool_eq38 ((x119 (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE29 ((_ BitVec 64)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 64))) (sort us_image
  (attr__ATTRIBUTE_IMAGE29 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check29 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE29 (uni) (_ BitVec 64))

(declare-fun to_rep26 (positive_output_block_count_t) (_ BitVec 64))

(declare-fun of_rep26 ((_ BitVec 64)) positive_output_block_count_t)

(declare-fun user_eq50 (positive_output_block_count_t
  positive_output_block_count_t) Bool)

(declare-fun dummy50 () positive_output_block_count_t)

;; inversion_axiom
  (assert
  (forall ((x119 positive_output_block_count_t))
  (! (= (of_rep26 (to_rep26 x119)) x119) :pattern ((to_rep26 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 positive_output_block_count_t)) (! (in_range27
  (to_rep26 x119)) :pattern ((to_rep26 x119)) )))

(define-fun to_int28 ((x119 positive_output_block_count_t)) Int (bv2nat 
  (to_rep26 x119)))

;; range_int_axiom
  (assert
  (forall ((x119 positive_output_block_count_t)) (! (in_range_int26
  (to_int28 x119)) :pattern ((to_int28 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 64)))
  (! (= (to_rep26 (of_rep26 x119)) x119) :pattern ((to_rep26 (of_rep26 x119))) )))

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS17 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS18 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS19 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS20 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS21 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS22 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS23 () Int)

(define-fun dynamic_property6 ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x119 (_ BitVec 64))) Bool (and (bvule first_int x119)
                             (bvule x119 last_int)))

(define-fun dynamic_property_int2 ((first_int Int) (last_int Int)
  (x119 Int)) Bool (and (<= first_int x119) (<= x119 last_int)))

(define-fun bool_eq39 ((x119 (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE30 ((_ BitVec 64)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 64))) (sort us_image
  (attr__ATTRIBUTE_IMAGE30 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check30 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE30 (uni) (_ BitVec 64))

(declare-fun user_eq51 (unsigned_64 unsigned_64) Bool)

(declare-fun dummy51 () unsigned_64)

(declare-fun first8 (t10) unsigned_64)

(declare-fun last8 (t10) unsigned_64)

(declare-fun mk4 ((_ BitVec 64) (_ BitVec 64)) t10)

;; mk_def
  (assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
  (! (=> (in_range5 f)
     (=> (in_range5 l)
     (and (= (to_rep4 (first8 (mk4 f l))) f)
     (= (to_rep4 (last8 (mk4 f l))) l)))) :pattern ((mk4 f l)) )))

(define-fun dynamic_property7 ((range_first (_ BitVec 64))
  (range_last (_ BitVec 64)) (low (_ BitVec 64))
  (high (_ BitVec 64))) Bool (and (in_range5 low)
                             (and (in_range5 high)
                             (=> (bvule low high)
                             (and (dynamic_property6 range_first range_last
                             low) (dynamic_property6 range_first range_last
                             high))))))

(declare-fun mk___t4 ((Array (_ BitVec 64) byte) t10) us_t6)

(declare-fun elts4 (us_t6) (Array (_ BitVec 64) byte))

;; elts_def
  (assert
  (forall ((u (Array (_ BitVec 64) byte)) (u1 t10))
  (= (elts4 (mk___t4 u u1)) u)))

(declare-fun rt4 (us_t6) t10)

;; rt_def
  (assert
  (forall ((u (Array (_ BitVec 64) byte)) (u1 t10))
  (= (rt4 (mk___t4 u u1)) u1)))

(define-fun of_array4 ((a (Array (_ BitVec 64) byte)) (f (_ BitVec 64))
  (l (_ BitVec 64))) us_t6 (mk___t4 a (mk4 f l)))

(define-fun first9 ((a us_t6)) (_ BitVec 64) (to_rep4 (first8 (rt4 a))))

(define-fun last9 ((a us_t6)) (_ BitVec 64) (to_rep4 (last8 (rt4 a))))

(define-fun length4 ((a us_t6)) Int (ite (bvule (first9 a) (last9 a))
                                    (+ (- (bv2nat (last9 a)) (bv2nat 
                                    (first9 a))) 1) 0))

(declare-fun value__size22 () Int)

(declare-fun object__size22 ((Array (_ BitVec 64) byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size22))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__size22 a))))

(define-fun bool_eq40 ((x119 us_t6)
  (y us_t6)) Bool (bool_eq26 (elts4 x119) (to_rep4 (first8 (rt4 x119)))
                  (to_rep4 (last8 (rt4 x119))) (elts4 y)
                  (to_rep4 (first8 (rt4 y))) (to_rep4 (last8 (rt4 y)))))

(declare-fun user_eq52 (us_t6 us_t6) Bool)

(declare-fun dummy52 () us_t6)

;; compare_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (and
     (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq26 a a_first a_last b b_first b_last) true))
     (and
     (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i34 (_ BitVec 64)) (j12 (_ BitVec 64)))
     (and (bvule i34 a_last)
     (and (bvult j12 b_last)
     (and (= (bool_eq26 a a_first i34 b b_first j12) true)
     (or (= i34 a_last)
     (and (bvult i34 a_last)
     (bvult (to_rep5 (select a (bvadd i34 ((_ int2bv 64) 1)))) (to_rep5
                                                               (select b (bvadd j12 ((_ int2bv 64) 1))))))))))))
     (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i34 (_ BitVec 64)) (j12 (_ BitVec 64)))
     (and (bvule i34 b_last)
     (and (bvult j12 a_last)
     (and (= (bool_eq26 a a_first j12 b b_first i34) true)
     (or (= i34 b_last)
     (and (bvult i34 b_last)
     (bvugt (to_rep5 (select a (bvadd j12 ((_ int2bv 64) 1)))) (to_rep5
                                                               (select b (bvadd i34 ((_ int2bv 64) 1)))))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun r227b () (_ BitVec 64))

(define-fun dynamic_property8 ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x119 (_ BitVec 64))) Bool (and (bvule first_int x119)
                             (bvule x119 last_int)))

(define-fun dynamic_property_int3 ((first_int Int) (last_int Int)
  (x119 Int)) Bool (and (<= first_int x119) (<= x119 last_int)))

(define-fun bool_eq41 ((x119 (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE31 ((_ BitVec 64)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 64))) (sort us_image
  (attr__ATTRIBUTE_IMAGE31 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check31 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE31 (uni) (_ BitVec 64))

(declare-fun user_eq53 (unsigned_64 unsigned_64) Bool)

(declare-fun dummy53 () unsigned_64)

(declare-fun attr__ATTRIBUTE_ADDRESS24 () Int)

(declare-sort t229b 0)

(declare-fun t229b1 () ty)

(define-fun in_range28 ((x119 (_ BitVec 64))) Bool (and
                                                   (bvule ((_ int2bv 64) 0) x119)
                                                   (bvule x119 ((_ int2bv 64) 63))))

(define-fun in_range_int27 ((x119 Int)) Bool (and (<= 0 x119) (<= x119 63)))

(define-fun bool_eq42 ((x119 (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x119 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE32 ((_ BitVec 64)) uni)

;; attr__ATTRIBUTE_IMAGE_sort
  (assert
  (forall ((x119 (_ BitVec 64))) (sort us_image
  (attr__ATTRIBUTE_IMAGE32 x119))))

(declare-fun attr__ATTRIBUTE_VALUE__pre_check32 (uni) Bool)

(declare-fun attr__ATTRIBUTE_VALUE32 (uni) (_ BitVec 64))

(declare-fun to_rep27 (t229b) (_ BitVec 64))

(declare-fun of_rep27 ((_ BitVec 64)) t229b)

(declare-fun user_eq54 (t229b t229b) Bool)

(declare-fun dummy54 () t229b)

;; inversion_axiom
  (assert
  (forall ((x119 t229b))
  (! (= (of_rep27 (to_rep27 x119)) x119) :pattern ((to_rep27 x119)) )))

;; range_axiom
  (assert
  (forall ((x119 t229b)) (! (in_range28
  (to_rep27 x119)) :pattern ((to_rep27 x119)) )))

(define-fun to_int29 ((x119 t229b)) Int (bv2nat (to_rep27 x119)))

;; range_int_axiom
  (assert
  (forall ((x119 t229b)) (! (in_range_int27
  (to_int29 x119)) :pattern ((to_int29 x119)) )))

;; coerce_axiom
  (assert
  (forall ((x119 (_ BitVec 64)))
  (! (= (to_rep27 (of_rep27 x119)) x119) :pattern ((to_rep27 (of_rep27 x119))) )))

(declare-fun dummy55 () (Array (_ BitVec 64) byte))

(declare-fun value__size23 () Int)

(declare-fun object__size23 ((Array (_ BitVec 64) byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size23))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__size23 a))))

(declare-fun user_eq55 ((Array (_ BitVec 64) byte)
  (Array (_ BitVec 64) byte)) Bool)

;; compare_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (and
     (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq26 a a_first a_last b b_first b_last) true))
     (and
     (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i34 (_ BitVec 64)) (j12 (_ BitVec 64)))
     (and (bvule i34 a_last)
     (and (bvult j12 b_last)
     (and (= (bool_eq26 a a_first i34 b b_first j12) true)
     (or (= i34 a_last)
     (and (bvult i34 a_last)
     (bvult (to_rep5 (select a (bvadd i34 ((_ int2bv 64) 1)))) (to_rep5
                                                               (select b (bvadd j12 ((_ int2bv 64) 1))))))))))))
     (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i34 (_ BitVec 64)) (j12 (_ BitVec 64)))
     (and (bvule i34 b_last)
     (and (bvult j12 a_last)
     (and (= (bool_eq26 a a_first j12 b b_first i34) true)
     (or (= i34 b_last)
     (and (bvult i34 b_last)
     (bvugt (to_rep5 (select a (bvadd j12 ((_ int2bv 64) 1)))) (to_rep5
                                                               (select b (bvadd i34 ((_ int2bv 64) 1)))))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun c231b () (_ BitVec 64))

(declare-fun temp___standard__skein_134 ((_ BitVec 8)) us_t6)

;; def_axiom
  (assert
  (forall ((temp___standard__skein_136 (_ BitVec 8)))
  (! (forall ((temp___standard__skein_137 (_ BitVec 64)))
     (= (select (elts4
                (temp___standard__skein_134 temp___standard__skein_136)) temp___standard__skein_137) 
     (of_rep5 temp___standard__skein_136))) :pattern ((temp___standard__skein_134
                                                      temp___standard__skein_136)) )))

(declare-fun temp___standard__skein_155 ((_ BitVec 8)) (Array (_ BitVec 64) byte))

;; def_axiom
  (assert
  (forall ((temp___standard__skein_157 (_ BitVec 8)))
  (! (forall ((temp___standard__skein_158 (_ BitVec 64)))
     (= (select (temp___standard__skein_155 temp___standard__skein_157) temp___standard__skein_158) 
     (of_rep5 temp___standard__skein_157))) :pattern ((temp___standard__skein_155
                                                      temp___standard__skein_157)) )))

;; add_in_range__def_axiom
  (assert
  (forall ((x119 (_ BitVec 64)) (y (_ BitVec 64)))
  (! (= (= (add_in_range x119 y) true)
     (bvule y (bvsub ((_ int2bv 64) 18446744073709551615) x119))) :pattern (
  (add_in_range x119 y)) )))

(declare-fun n2 () (_ BitVec 64))

(declare-fun blocks_done3 () (_ BitVec 64))

(declare-fun blocks_required2 () (_ BitVec 64))

(declare-fun byte_count2 () (_ BitVec 64))

(declare-fun tmp_byte_count_add2 () (_ BitVec 64))

(declare-fun temp___standard__skein_1392 () (Array (_ BitVec 64) byte))

(declare-fun temp___standard__skein_1393 () t10)

(declare-fun temp___standard__skein_1402 () (Array (_ BitVec 64) byte))

(declare-fun temp___standard__skein_1403 () t)

(declare-fun local_ctx__split_fields123 () u64)

(declare-fun local_ctx__split_fields124 () u32)

(declare-fun local_ctx__split_fields125 () u16)

(declare-fun local_ctx__split_fields126 () u7)

(declare-fun local_ctx__split_fields127 () Bool)

(declare-fun local_ctx__split_fields128 () u6)

(declare-fun local_ctx__split_fields129 () Bool)

(declare-fun local_ctx__split_fields130 () Bool)

(declare-fun local_ctx__split_fields131 () hash_bit_length)

(declare-fun local_ctx__split_fields132 () u64)

(declare-fun local_ctx__split_fields133 () (Array (_ BitVec 64) u64))

(declare-fun local_ctx__split_fields134 () (Array (_ BitVec 64) byte))

;; H
  (assert (dynamic_property ((_ int2bv 64) 0)
  ((_ int2bv 64) 18446744073709551615) (to_rep4 hash__first)
  (to_rep4 hash__last)))

;; H
  (assert
  (and
  (and
  (and (in_range9 (hash_bit_len_of ctx)) (in_range11 (byte_count_of ctx)))
  (= (to_rep4 hash__first) ((_ int2bv 64) 0)))
  (bvule (bvsub (bvudiv (bvadd (hash_bit_len_of ctx) ((_ int2bv 64) 7)) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)) 
  (to_rep4 hash__last))))

;; H
  (assert
  (=> (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 18446744073709551615))
  (in_range1 n2)))

;; H
  (assert
  (=> (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 36028797018963968)) (in_range26
  blocks_done3)))

;; H
  (assert
  (=> (bvule ((_ int2bv 64) 1) ((_ int2bv 64) 36028797018963968)) (in_range27
  blocks_required2)))

;; H
  (assert
  (=> (bvule ((_ int2bv 64) 1) ((_ int2bv 64) 2305843009213693951))
  (in_range25 byte_count2)))

;; H
  (assert
  (=> (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 18446744073709551615))
  (in_range1 tmp_byte_count_add2)))

;; H
  (assert
  (= (mk___split_fields2
     (mk_context_header
     (mk___split_fields1
     (mk_tweak_value
     (mk___split_fields local_ctx__split_fields123 local_ctx__split_fields124
     local_ctx__split_fields125 local_ctx__split_fields126
     local_ctx__split_fields127 local_ctx__split_fields128
     local_ctx__split_fields129 local_ctx__split_fields130))
     local_ctx__split_fields131 local_ctx__split_fields132))
     local_ctx__split_fields133 local_ctx__split_fields134) (us_split_fields8
                                                            ctx)))

;; H
  (assert
  (= (to_rep4 (first8 (rt4 (temp___standard__skein_134 ((_ int2bv 8) 0))))) 
  (to_rep4 hash__first)))

;; H
  (assert
  (= (to_rep4 (last8 (rt4 (temp___standard__skein_134 ((_ int2bv 8) 0))))) 
  (to_rep4 hash__last)))

;; H
  (assert
  (= (mk___t4 temp___standard__skein_1392 temp___standard__skein_1393) 
  (temp___standard__skein_134 ((_ int2bv 8) 0))))

;; H
  (assert (= temp___standard__skein_1392 temp___standard__skein_1402))

;; H
  (assert
  (= (mk (to_rep4 (first8 temp___standard__skein_1393))
     (to_rep4 (last8 temp___standard__skein_1393))) temp___standard__skein_1403))

(assert
;; WP_parameter_def3
 ;; File "/home/florian/ac/spark2014/testsuite/gnatprove/tests/sparkskein/gnatprove/skein/../skein.mlw", line 29392, characters 5-8
  (not
  (= (ite (<= (bv2nat (to_rep4 (first temp___standard__skein_1403))) (bv2nat 
     (to_rep4 (last temp___standard__skein_1403))))
     (+ (- (bv2nat (to_rep4 (last temp___standard__skein_1403))) (bv2nat 
     (to_rep4 (first temp___standard__skein_1403)))) 1) 0) (ite (<= (bv2nat 
                                                           (to_rep4
                                                           hash__first)) (bv2nat 
                                                           (to_rep4
                                                           hash__last)))
                                                           (+ (- (bv2nat 
                                                           (to_rep4
                                                           hash__last)) (bv2nat 
                                                           (to_rep4
                                                           hash__first))) 1)
                                                           0))))
(check-sat)
