;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((bool1 (True) (False))))
(declare-datatypes () ((tuple01 (Tuple01))))
(declare-sort qtmark1 0)

(declare-sort us_private 0)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image1 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content bool1)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(declare-fun us_compatible_tags (Int Int) Bool)

;; __compatible_tags_refl
  (assert (forall ((tag Int)) (us_compatible_tags tag tag)))

(declare-sort tmoneyB 0)

(define-fun in_range4 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun dummy4 () tmoneyB)

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image1)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image1) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image1) Int)

(declare-fun to_fixed2 (tmoneyB) Int)

(declare-fun of_fixed2 (Int) tmoneyB)

(declare-fun user_eq4 (tmoneyB tmoneyB) bool1)

(define-fun pos_div_relation2 ((res Int) (num Int)
  (den Int)) Bool (let ((exact2 (div1 num den)))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact2 den)) (= res exact2)
                  (and (<= exact2 res) (<= res (+ exact2 1)))))))

(define-fun pos_div_relation_rna2 ((res Int) (num Int)
  (den Int)) Bool (let ((exact2 (div1 num den)))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact2 den)) (= res exact2)
                  (ite (< (- num (* exact2 den)) (- (* (+ exact2 1) den) num))
                  (= res exact2) (= res (+ exact2 1)))))))

(declare-fun fxp_mult2 (Int Int) Int)

;; fxp_mult_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (or (= x 0) (= y 0)) (= (fxp_mult2 x y) 0)
     (ite (or (and (< 0 x) (< 0 y)) (and (< x 0) (< y 0))) (pos_div_relation2
     (fxp_mult2 x y) (* x y) 100) (pos_div_relation2 (- (fxp_mult2 x y))
     (- (* x y)) 100))) :pattern ((fxp_mult2 x y)) ))))

(declare-fun fxp_div2 (Int Int) Int)

;; fxp_div_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (= x 0) (= (fxp_div2 x y) 0)
     (ite (and (< 0 x) (< 0 y)) (pos_div_relation2 (fxp_div2 x y) (* x 100)
     y)
     (ite (and (< x 0) (< y 0)) (pos_div_relation2 (fxp_div2 x y)
     (* (- x) 100) (- y))
     (ite (and (< x 0) (< 0 y)) (pos_div_relation2 (- (fxp_div2 x y))
     (* (- x) 100) y)
     (=> (and (< 0 x) (< y 0)) (pos_div_relation2 (- (fxp_div2 x y))
     (* x 100) (- y))))))) :pattern ((fxp_div2 x y)) ))))

(declare-fun fxp_div_int2 (Int Int) Int)

;; fxp_div_int_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (= x 0) (= (fxp_div_int2 x y) 0)
     (ite (and (< 0 x) (< 0 y)) (pos_div_relation2 (fxp_div_int2 x y) x y)
     (ite (and (< x 0) (< y 0)) (pos_div_relation2 (fxp_div_int2 x y) (- x)
     (- y))
     (ite (and (< x 0) (< 0 y)) (pos_div_relation2 (- (fxp_div_int2 x y))
     (- x) y)
     (=> (and (< 0 x) (< y 0)) (pos_div_relation2 (- (fxp_div_int2 x y)) x
     (- y))))))) :pattern ((fxp_div_int2 x y)) ))))

(declare-fun fxp_div_result_int2 (Int Int) Int)

;; fxp_div_result_int_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (= x 0) (= (fxp_div_result_int2 x y) 0)
     (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna2
     (fxp_div_result_int2 x y) x y)
     (ite (and (< x 0) (< y 0)) (pos_div_relation_rna2
     (fxp_div_result_int2 x y) (- x) (- y))
     (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna2
     (- (fxp_div_result_int2 x y)) (- x) y)
     (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna2
     (- (fxp_div_result_int2 x y)) x (- y))))))) :pattern ((fxp_div_result_int2
                                                           x y)) ))))

(declare-fun to_int3 (Int) Int)

;; to_int_def
  (assert
  (forall ((x Int))
  (! (ite (= x 0) (= (to_int3 x) 0)
     (ite (< 0 x) (pos_div_relation2 (to_int3 x) x 100) (pos_div_relation2
     (- (to_int3 x)) (- x) 100))) :pattern ((to_int3 x)) )))

(declare-fun to_real4 (Int) Real)

(declare-fun of_real3 (Real) Int)

;; inversion_axiom
  (assert
  (forall ((x tmoneyB))
  (! (= (of_fixed2 (to_fixed2 x)) x) :pattern ((to_fixed2 x)) )))

;; range_axiom
  (assert (forall ((x tmoneyB)) (in_range4 (to_fixed2 x))))

(declare-datatypes ()
((tmoneyB__ref (mk_tmoneyB__ref (tmoneyB__content tmoneyB)))))
(declare-sort money 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 999999999999999) x)
                                     (<= x 999999999999999)))

(declare-fun dummy5 () money)

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image1)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image1) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image1) Int)

(declare-fun to_fixed3 (money) Int)

(declare-fun of_fixed3 (Int) money)

(declare-fun user_eq5 (money money) bool1)

(define-fun pos_div_relation3 ((res Int) (num Int)
  (den Int)) Bool (let ((exact2 (div1 num den)))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact2 den)) (= res exact2)
                  (and (<= exact2 res) (<= res (+ exact2 1)))))))

(define-fun pos_div_relation_rna3 ((res Int) (num Int)
  (den Int)) Bool (let ((exact2 (div1 num den)))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact2 den)) (= res exact2)
                  (ite (< (- num (* exact2 den)) (- (* (+ exact2 1) den) num))
                  (= res exact2) (= res (+ exact2 1)))))))

(declare-fun fxp_mult3 (Int Int) Int)

;; fxp_mult_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (or (= x 0) (= y 0)) (= (fxp_mult3 x y) 0)
     (ite (or (and (< 0 x) (< 0 y)) (and (< x 0) (< y 0))) (pos_div_relation3
     (fxp_mult3 x y) (* x y) 100) (pos_div_relation3 (- (fxp_mult3 x y))
     (- (* x y)) 100))) :pattern ((fxp_mult3 x y)) ))))

(declare-fun fxp_div3 (Int Int) Int)

;; fxp_div_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (= x 0) (= (fxp_div3 x y) 0)
     (ite (and (< 0 x) (< 0 y)) (pos_div_relation3 (fxp_div3 x y) (* x 100)
     y)
     (ite (and (< x 0) (< y 0)) (pos_div_relation3 (fxp_div3 x y)
     (* (- x) 100) (- y))
     (ite (and (< x 0) (< 0 y)) (pos_div_relation3 (- (fxp_div3 x y))
     (* (- x) 100) y)
     (=> (and (< 0 x) (< y 0)) (pos_div_relation3 (- (fxp_div3 x y))
     (* x 100) (- y))))))) :pattern ((fxp_div3 x y)) ))))

(declare-fun fxp_div_int3 (Int Int) Int)

;; fxp_div_int_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (= x 0) (= (fxp_div_int3 x y) 0)
     (ite (and (< 0 x) (< 0 y)) (pos_div_relation3 (fxp_div_int3 x y) x y)
     (ite (and (< x 0) (< y 0)) (pos_div_relation3 (fxp_div_int3 x y) (- x)
     (- y))
     (ite (and (< x 0) (< 0 y)) (pos_div_relation3 (- (fxp_div_int3 x y))
     (- x) y)
     (=> (and (< 0 x) (< y 0)) (pos_div_relation3 (- (fxp_div_int3 x y)) x
     (- y))))))) :pattern ((fxp_div_int3 x y)) ))))

(declare-fun fxp_div_result_int3 (Int Int) Int)

;; fxp_div_result_int_def
  (assert
  (forall ((x Int))
  (forall ((y Int))
  (! (ite (= x 0) (= (fxp_div_result_int3 x y) 0)
     (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna3
     (fxp_div_result_int3 x y) x y)
     (ite (and (< x 0) (< y 0)) (pos_div_relation_rna3
     (fxp_div_result_int3 x y) (- x) (- y))
     (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna3
     (- (fxp_div_result_int3 x y)) (- x) y)
     (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna3
     (- (fxp_div_result_int3 x y)) x (- y))))))) :pattern ((fxp_div_result_int3
                                                           x y)) ))))

(declare-fun to_int4 (Int) Int)

;; to_int_def
  (assert
  (forall ((x Int))
  (! (ite (= x 0) (= (to_int4 x) 0)
     (ite (< 0 x) (pos_div_relation3 (to_int4 x) x 100) (pos_div_relation3
     (- (to_int4 x)) (- x) 100))) :pattern ((to_int4 x)) )))

(declare-fun to_real5 (Int) Real)

(declare-fun of_real4 (Real) Int)

;; inversion_axiom
  (assert
  (forall ((x money))
  (! (= (of_fixed3 (to_fixed3 x)) x) :pattern ((to_fixed3 x)) )))

;; range_axiom
  (assert (forall ((x money)) (in_range5 (to_fixed3 x))))

(declare-datatypes () ((money__ref (mk_money__ref (money__content money)))))
(declare-fun m () money)

;; H
  (assert (not (= (to_fixed3 m) 999999999999999)))

(assert
;; WP_parameter_def3
 ;; File "/home/florian/ac/spark2014/benchmark_script/data/tmp-test-KC20-032__succ_pred-26704/src/gnatprove/p/../p.mlw", line 2138, characters 5-8
  (not (in_range5 (- (+ (to_fixed3 m) 1) 1))))
(check-sat)
